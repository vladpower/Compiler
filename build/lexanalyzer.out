1	bool	reserved word	6
1	one	identifier	0
1	=	assign operation	0
1	true	bool constant	1
1	;	separator	1
2	double	reserved word	8
2	three	identifier	0
2	=	assign operation	0
2	3.5	float constant	3.5
2	;	separator	1
3	int	reserved word	7
3	four	identifier	0
3	=	assign operation	0
3	5.7685E-5	float constant	5.7685e-05
3	;	separator	1
4	four	identifier	0
4	=	assign operation	0
4	one	identifier	0
4	+	arifmetic operation	0
4	three	identifier	0
4	;	separator	1
5	if	reserved word	0
5	(	separator	2
5	one	identifier	0
5	!=	comparison operation	3
5	four	identifier	0
5	&&	logic operation	0
5	one	identifier	0
5	||	logic operation	1
5	four	identifier	0
5	)	separator	3
6	for	reserved word	2
6	(	separator	2
6	int	reserved word	7
6	i	identifier	0
6	=	assign operation	0
6	0	integer constant	0
6	;	separator	1
6	i	identifier	0
6	<	comparison operation	1
6	5	integer constant	5
6	;	separator	1
6	++	unary type	0
6	i	identifier	0
6	)	separator	3
6	{	separator	4
7	int	reserved word	7
7	j	identifier	0
7	=	assign operation	0
7	10	integer constant	10
7	;	separator	1
8	double	reserved word	8
8	a	identifier	0
8	;	separator	1
9	while	reserved word	3
9	(	separator	2
9	j	identifier	0
9	<	comparison operation	1
9	0	integer constant	0
9	)	separator	3
9	{	separator	4
10	k	identifier	0
10	=	assign operation	0
10	--	unary type	1
10	j	identifier	0
10	;	separator	1
11	}	separator	5
15	if	reserved word	0
15	(	separator	2
15	i	identifier	0
15	==	comparison operation	2
15	3	integer constant	3
15	)	separator	3
16	break	reserved word	4
16	;	separator	1
18	else	reserved word	1
18	if	reserved word	0
18	(	separator	2
18	i	identifier	0
18	>	comparison operation	0
18	3	integer constant	3
18	)	separator	3
19	continue	reserved word	5
19	;	separator	1
20	}	separator	5
21	three	identifier	0
21	=	assign operation	0
21	!	unary type	2
21	one	identifier	0
21	;	separator	1
